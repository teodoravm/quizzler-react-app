{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TEODORA\\\\clone-quiz\\\\quizzler-react-app\\\\src\\\\AllQuestions.js\",\n  _s = $RefreshSig$();\nimport React, { component, Suspense, lazy } from 'react';\nimport './Question';\nimport Loading from './Loading';\nimport Question from './Question';\n// import './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AllQuestions(props) {\n  _s();\n  const [finished, setFinished] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  const [questionsAndAnswers, setQuestionsAndAnswers] = React.useState([]);\n  const [rightAnswers, setRightAnswers] = React.useState(0);\n  const [isLoading, setIsLoading] = React.useState(true);\n  React.useEffect(function fetchData() {\n    if (questions.length === 0) {\n      fetch(\"https://opentdb.com/api.php?amount=10\").then(res => res.json()).then(data => {\n        setQuestions(data.results);\n        setQuestionsAndAnswers(data.results.map(questionObj => {\n          const correctAnswer = questionObj.correct_answer;\n          const options = createRandomArray([...questionObj.incorrect_answers, questionObj.correct_answer]);\n          return {\n            question: questionObj.question,\n            correctAnswer: correctAnswer,\n            options: options,\n            selectedAnswer: \"\"\n          };\n        }));\n      });\n    }\n  }, [questionsAndAnswers]);\n  function createRandomArray(arr) {\n    let myArr = arr;\n    let newArr = [];\n    while (myArr.length > 0) {\n      let randomIndex = Math.floor(Math.random() * myArr.length);\n      newArr.push(myArr[randomIndex]);\n      myArr.splice(randomIndex, 1);\n    }\n    return newArr;\n  }\n  function selectAnswer(answer, currentQuestion) {\n    setQuestionsAndAnswers(questionsAndAnswers.map(questionObj => {\n      return questionObj.question === currentQuestion ? {\n        ...questionObj,\n        selectedAnswer: answer\n      } : questionObj;\n    }));\n    console.log(\"selected\");\n  }\n  function checkAnswers() {\n    questionsAndAnswers.forEach(questionObj => {\n      if (questionObj.selectedAnswer === questionObj.correctAnswer) {\n        setRightAnswers(prevAns => prevAns + 1);\n      }\n    });\n    setFinished(true);\n  }\n  function playAgain() {\n    setQuestionsAndAnswers([]);\n    setQuestions([]);\n    setFinished(false);\n    setRightAnswers(0);\n    props.setStarted(false);\n  }\n  const questionElements = questionsAndAnswers.map((questionObj, index) => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      question: questionObj.question,\n      allAnswers: questionObj.options,\n      correctAnswer: questionObj.correctAnswer,\n      selectedAnswer: questionObj.selectedAnswer,\n      selectAnswer: selectAnswer,\n      finished: finished,\n      isLoading: isLoading,\n      setIsLoading: setIsLoading\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"allQuestions-container\",\n    children: [questionElements, finished && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"You have \", rightAnswers, \"/10 correct answers.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-check\",\n      onClick: finished ? playAgain : checkAnswers,\n      children: finished ? \"Play again\" : \"Check results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 40\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n_s(AllQuestions, \"mpLN+0xwR8RkEMe2geJC3ZY0wkE=\");\n_c = AllQuestions;\nvar _c;\n$RefreshReg$(_c, \"AllQuestions\");","map":{"version":3,"names":["React","component","Suspense","lazy","Loading","Question","AllQuestions","props","finished","setFinished","useState","questions","setQuestions","questionsAndAnswers","setQuestionsAndAnswers","rightAnswers","setRightAnswers","isLoading","setIsLoading","useEffect","fetchData","length","fetch","then","res","json","data","results","map","questionObj","correctAnswer","correct_answer","options","createRandomArray","incorrect_answers","question","selectedAnswer","arr","myArr","newArr","randomIndex","Math","floor","random","push","splice","selectAnswer","answer","currentQuestion","console","log","checkAnswers","forEach","prevAns","playAgain","setStarted","questionElements","index"],"sources":["C:/Users/TEODORA/clone-quiz/quizzler-react-app/src/AllQuestions.js"],"sourcesContent":["import React, { component, Suspense, lazy} from 'react';\r\nimport './Question';\r\nimport Loading from './Loading';\r\nimport Question from './Question';\r\n// import './index.css';\r\n\r\n\r\nexport default function AllQuestions(props) {\r\n\r\n    const [finished, setFinished] = React.useState(false)\r\n    const [questions, setQuestions] = React.useState([])\r\n    const [questionsAndAnswers, setQuestionsAndAnswers] = React.useState([])\r\n    const [rightAnswers, setRightAnswers] = React.useState(0)\r\n    const [isLoading, setIsLoading] = React.useState(true)\r\n\r\n    React.useEffect(\r\n            function fetchData() {\r\n                if(questions.length === 0) {\r\n                    fetch(\"https://opentdb.com/api.php?amount=10\")\r\n                    .then(res => res.json())\r\n                    .then(data => {\r\n                      setQuestions(data.results)\r\n        \r\n                      setQuestionsAndAnswers(data.results.map(questionObj => {\r\n                        const correctAnswer = questionObj.correct_answer\r\n                        const options = createRandomArray([\r\n                            ...questionObj.incorrect_answers, questionObj.correct_answer]) \r\n        \r\n                        return {\r\n                            question: questionObj.question,\r\n                            correctAnswer: correctAnswer,\r\n                            options: options,\r\n                            selectedAnswer: \"\"\r\n                        }\r\n                      }))\r\n        \r\n                    })\r\n\r\n                }\r\n            }\r\n        , [questionsAndAnswers])\r\n\r\n     function createRandomArray(arr) {\r\n         let myArr = arr\r\n         let newArr = []\r\n\r\n         while(myArr.length > 0) {\r\n            let randomIndex = Math.floor(Math.random() * myArr.length)\r\n            newArr.push(myArr[randomIndex])\r\n            myArr.splice(randomIndex, 1)\r\n         }\r\n            return newArr  \r\n    }\r\n\r\n    function selectAnswer(answer, currentQuestion) {\r\n        setQuestionsAndAnswers(questionsAndAnswers.map(questionObj => {\r\n            return questionObj.question === currentQuestion ?\r\n            {...questionObj, selectedAnswer: answer} :\r\n            questionObj\r\n        }))\r\n        console.log(\"selected\")\r\n    }\r\n\r\n    function checkAnswers() {\r\n        \r\n        questionsAndAnswers.forEach(questionObj => {\r\n           if(questionObj.selectedAnswer === questionObj.correctAnswer) {\r\n            setRightAnswers(prevAns => prevAns + 1)\r\n           }\r\n        })\r\n\r\n\r\n        setFinished(true)\r\n    }\r\n\r\n\r\n    function playAgain() {\r\n       \r\n        setQuestionsAndAnswers([])\r\n        setQuestions([])\r\n        setFinished(false)\r\n        setRightAnswers(0)\r\n        props.setStarted(false)\r\n    }\r\n    \r\n    const questionElements = questionsAndAnswers.map((questionObj, index) => {\r\n        return <Question \r\n            key={index}\r\n            question={questionObj.question}\r\n            allAnswers={questionObj.options}\r\n            correctAnswer={questionObj.correctAnswer}\r\n            selectedAnswer={questionObj.selectedAnswer}\r\n            selectAnswer={selectAnswer}\r\n            finished={finished}\r\n            isLoading={isLoading}\r\n            setIsLoading={setIsLoading}\r\n            />\r\n    })\r\n\r\n\r\n    return (\r\n        <div className='allQuestions-container'>\r\n            {questionElements}\r\n\r\n            {finished &&\r\n            <div className='result-box'>\r\n                <h3>You have {rightAnswers}/10 correct answers.</h3>\r\n            </div>}\r\n            {isLoading ? <Loading /> : <button className='btn-check' onClick={finished ? playAgain : checkAnswers}>\r\n                {finished ? \"Play again\" : \"Check results\"}</button> }\r\n    \r\n         </div>\r\n)\r\n     \r\n    \r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}